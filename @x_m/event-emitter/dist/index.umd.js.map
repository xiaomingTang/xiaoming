{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["interface AddListenerOptions {\n  /**\n   * not specified means Infinity\n   */\n  times?: number\n}\n\ninterface EventsOverview {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any[]\n}\n\ninterface EventRecorder {\n  callback: (...args: unknown[]) => void\n  times: number\n}\n\n/**\n * ``` typescript\n * const eventBus = new EventEmitter<{\n *   'eat': ['apple' |'peach', number];\n *   'touch': [string];\n * }>()\n *\n * eventBus.addListener('eat', (food, count) => {\n *   console.log(`I had eat ${count} ${food}`)\n * })\n *\n * eventBus.addListener('touch', (something) => {\n *   console.log(`I'm touching ${something}`)\n * }, {\n *   // only triggered twice; Infinity if not specified\n *   times: 2,\n * })\n *\n * // I had eat 2 apple\n * eventBus.emit('eat', 'apple', 2)\n *\n * // I'm touching apple\n * eventBus.emit('touch', 'apple')\n * // I'm touching peach\n * eventBus.emit('touch', 'peach')\n * // NOT triggered, as it only triggered twice\n * eventBus.emit('touch', 'apple')\n * ```\n */\nexport default class EventEmitter<M extends EventsOverview = EventsOverview> {\n  #eventsMap = {} as Record<keyof M, EventRecorder[]>\n\n  addListener<K extends keyof M>(\n    eventName: K,\n    handler: (...args: M[K]) => void,\n    options?: AddListenerOptions\n  ) {\n    if (!this.#eventsMap[eventName]) {\n      // init\n      this.#eventsMap[eventName] = []\n    }\n    const times = options?.times ?? Infinity\n    const list = this.#eventsMap[eventName]\n    const idx = list.findIndex((item) => item.callback === handler)\n    if (idx >= 0) {\n      list[idx].times = times\n    } else {\n      list.push({\n        callback: handler as EventRecorder['callback'],\n        times,\n      })\n    }\n    return this\n  }\n\n  removeListener<K extends keyof M>(\n    eventName: K,\n    handler?: (...args: M[K]) => void\n  ) {\n    if (this.#eventsMap[eventName]) {\n      if (handler) {\n        this.#eventsMap[eventName] = this.#eventsMap[eventName].filter(\n          (item) => item.callback !== handler\n        )\n      } else {\n        this.#eventsMap[eventName] = []\n      }\n    }\n    return this\n  }\n\n  emit<K extends keyof M>(eventName: K, ...args: M[K]) {\n    if (this.#eventsMap[eventName]) {\n      this.#eventsMap[eventName] = this.#eventsMap[eventName].filter((item) => {\n        if (item.times > 0) {\n          item.callback(...args)\n          // eslint-disable-next-line no-param-reassign\n          item.times -= 1\n        }\n        return item.times > 0\n      })\n    }\n    return this\n  }\n}\n"],"names":["EventEmitter","eventName","handler","options","_options$times","_classPrivateFieldGet","_eventsMap","times","Infinity","list","idx","_findIndexInstanceProperty","item","callback","push","_context","_filterInstanceProperty","_len","args","_key","_context2"],"mappings":"6yCA8CqBA,kEACN,MAAA,CAAA,2CAEb,MAAA,SACEC,EACAC,EACAC,EACA,CAAA,IAAAC,EACKC,EAAAA,QAAA,KAAAC,CAAA,EAAgBL,KAEdI,EAAAA,QAAWJ,KAAAA,CAAAA,EAAAA,GAAa,CAAA,GAEzB,IAAAM,GAAQJ,EAAAA,GAAAA,YAAAA,EAASI,SAAjB,MAAAH,IAAA,OAAAA,EAA0BI,IAC1BC,EAAOJ,EAAAA,QAAgBJ,KAAAA,CAAAA,EAAAA,GACvBS,EAAMC,EAAAA,QAAAF,CAAK,OAALA,EAAe,SAACG,EAAD,CAAA,OAAUA,EAAKC,WAAaX,CAA5B,CAAV,EACjB,OAAIQ,GAAO,EACTD,EAAKC,GAAKH,MAAQA,EAElBE,EAAKK,KAAK,CACRD,SAAUX,EACVK,MAAAA,EAFF,EAKK,IACT,+BAEA,SACEN,EACAC,EACA,CACI,GAAAG,EAAA,QAAA,KAAAC,CAAA,EAAgBL,GAClB,GAAIC,EAAS,CAAA,IAAAa,EACXV,EAAA,QAAA,KAAAC,CAAA,EAAgBL,GAAae,EAAA,QAAAD,EAAAV,EAAAA,QAAA,KAAAC,CAAA,EAAgBL,EAAhB,EAAA,KAAAc,EAC3B,SAACH,EAAD,CAAA,OAAUA,EAAKC,WAAaX,CAA5B,CAD2B,CAGxB,MACAG,EAAAA,QAAWJ,KAAAA,CAAAA,EAAAA,GAAa,CAAA,EAG1B,OAAA,IACT,eAEA,MAAA,SAAwBA,EAA6B,CAAA,QAAAgB,EAAA,UAAA,OAAZC,EAAY,IAAA,MAAAD,EAAA,EAAAA,EAAA,EAAA,CAAA,EAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAZD,EAAYC,EAAA,GAAA,UAAAA,GAC/C,GAAAd,EAAA,QAAA,KAAAC,CAAA,EAAgBL,GAAY,CAAA,IAAAmB,EAC9Bf,EAAA,QAAA,KAAAC,CAAA,EAAgBL,GAAae,EAAA,QAAAI,EAAAf,EAAAA,QAAA,KAAAC,CAAA,EAAgBL,EAAkB,EAAA,KAAAmB,EAAA,SAACR,EAAS,CACnE,OAAAA,EAAKL,MAAQ,IACVK,EAAAC,SAAA,MAAAD,EAAYM,CAAZ,EAELN,EAAKL,OAAS,GAETK,EAAKL,MAAQ,CACrB,CAP4B,CAQ/B,CACO,OAAA,IACT"}