{"version":3,"file":"index.es.js","sources":["../src/index.ts"],"sourcesContent":["interface AddListenerOptions {\n  /**\n   * not specified means Infinity\n   */\n  times?: number;\n}\n\ninterface EventsOverview {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any[];\n}\n\ninterface EventRecorder {\n  callback: (...args: unknown[]) => void;\n  times: number;\n}\n\n/**\n * ``` typescript\n * const eventBus = new EventEmitter<{\n *   'eat': ['apple' |'peach', number];\n *   'touch': [string];\n * }>()\n *\n * eventBus.addListener('eat', (food, count) => {\n *   console.log(`I had eat ${count} ${food}`)\n * })\n *\n * eventBus.addListener('touch', (something) => {\n *   console.log(`I'm touching ${something}`)\n * }, {\n *   // only triggered twice; Infinity if not specified\n *   times: 2,\n * })\n *\n * // I had eat 2 apple\n * eventBus.emit('eat', 'apple', 2)\n *\n * // I'm touching apple\n * eventBus.emit('touch', 'apple')\n * // I'm touching peach\n * eventBus.emit('touch', 'peach')\n * // NOT triggered, as it only triggered twice\n * eventBus.emit('touch', 'apple')\n * ```\n */\nexport default class EventEmitter<M extends EventsOverview = EventsOverview> {\n  #eventsMap = {} as Record<keyof M, EventRecorder[]>\n\n  addListener<K extends keyof M>(\n    eventName: K,\n    handler: (...args: M[K]) => void,\n    options?: AddListenerOptions,\n  ) {\n    if (!this.#eventsMap[eventName]) {\n      // init\n      this.#eventsMap[eventName] = []\n    }\n    const times = options?.times ?? Infinity\n    const list = this.#eventsMap[eventName]\n    const idx = list.findIndex((item) => item.callback === handler)\n    if (idx >= 0) {\n      list[idx].times = times\n    } else {\n      list.push({\n        callback: handler as EventRecorder['callback'],\n        times,\n      })\n    }\n    return this\n  }\n\n  removeListener<K extends keyof M>(\n    eventName: K,\n    handler?: (...args: M[K]) => void,\n  ) {\n    if (this.#eventsMap[eventName]) {\n      if (handler) {\n        this.#eventsMap[eventName] = this.#eventsMap[eventName]\n          .filter((item) => item.callback !== handler)\n      } else {\n        this.#eventsMap[eventName] = []\n      }\n    }\n    return this\n  }\n\n  emit<K extends keyof M>(eventName: K, ...args: M[K]) {\n    if (this.#eventsMap[eventName]) {\n      this.#eventsMap[eventName] = this.#eventsMap[eventName].filter((item) => {\n        if (item.times > 0) {\n          item.callback(...args)\n          // eslint-disable-next-line no-param-reassign\n          item.times -= 1\n        }\n        return item.times > 0\n      })\n    }\n    return this\n  }\n}\n"],"names":["EventEmitter","eventName","handler","options","_options$times","_classPrivateFieldGet","_eventsMap","times","Infinity","list","idx","_findIndexInstanceProperty","item","callback","push","_context","_filterInstanceProperty","_len","args","_key","_context2"],"mappings":";;;;;;;;;;;;;iCA8CqBA;;;;MACN,OAAA,CAAA;AAAA;;;;IAEb,OAAA,SACEC,GACAC,GACAC,GACA;AAAA,UAAAC;AACI,MAACC,EAAA,MAAAC,CAAA,EAAgBL,OAEdI,EAAWJ,MAAAA,CAAAA,EAAAA,KAAa,CAAA;AAEzB,UAAAM,KAAQJ,IAAAA,KAAAA,gBAAAA,EAASI,WAAjB,QAAAH,MAAA,SAAAA,IAA0BI,OAC1BC,IAAOJ,EAAgBJ,MAAAA,CAAAA,EAAAA,IACvBS,IAAMC,EAAAF,CAAK,OAALA,GAAe,SAACG,GAAD;AAAA,eAAUA,EAAKC,aAAaX;AAAAA,MAA5B,CAAV;AACjB,aAAIQ,KAAO,IACTD,EAAKC,GAAKH,QAAQA,IAElBE,EAAKK,KAAK;AAAA,QACRD,UAAUX;AAAAA,QACVK,OAAAA;AAAAA,OAFF,GAKK;AAAA,IACT;AAAA;;WAEA,SACEN,GACAC,GACA;AACI,UAAAG,EAAA,MAAAC,CAAA,EAAgBL;AAClB,YAAIC,GAAS;AAAA,cAAAa;AACN,UAAAV,EAAA,MAAAC,CAAA,EAAWL,KAAae,EAAAD,IAAAV,EAAA,MAAAC,CAAA,EAAgBL,EAAhB,EAAA,KAAAc,GACnB,SAACH,GAAD;AAAA,mBAAUA,EAAKC,aAAaX;AAAAA,UAA5B,CADmB;AAAA,QAExB;AACA,UAAAG,EAAWJ,MAAAA,CAAAA,EAAAA,KAAa,CAAA;AAG1B,aAAA;AAAA,IACT;AAAA;;IAEA,OAAA,SAAwBA,GAA6B;AAAA,eAAAgB,IAAA,UAAA,QAAZC,IAAY,IAAA,MAAAD,IAAA,IAAAA,IAAA,IAAA,CAAA,GAAAE,IAAA,GAAAA,IAAAF,GAAAE;AAAZD,QAAAA,EAAYC,IAAA,KAAA,UAAAA;AAC/C,UAAAd,EAAA,MAAAC,CAAA,EAAgBL,IAAY;AAAA,YAAAmB;AAC9B,QAAAf,EAAA,MAAAC,CAAA,EAAgBL,KAAae,EAAAI,IAAAf,EAAA,MAAAC,CAAA,EAAgBL,EAAkB,EAAA,KAAAmB,GAAA,SAACR,GAAS;AACnE,iBAAAA,EAAKL,QAAQ,MACVK,EAAAC,SAAA,MAAAD,GAAYM,CAAZ,GAELN,EAAKL,SAAS,IAETK,EAAKL,QAAQ;AAAA,QACrB,CAP4B;AAAA,MAQ/B;AACO,aAAA;AAAA,IACT;AAAA;;"}